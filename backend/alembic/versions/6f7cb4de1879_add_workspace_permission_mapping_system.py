"""add_workspace_permission_mapping_system

Revision ID: 6f7cb4de1879
Revises: 2b314362f4e3
Create Date: 2025-06-27 15:00:43.213084

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '6f7cb4de1879'
down_revision: Union[str, Sequence[str], None] = '2b314362f4e3'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('groups',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_system_group', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.String(length=36), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_groups_name'), 'groups', ['name'], unique=True)
    op.create_table('workspace_group_mappings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('workspace_id', sa.String(length=36), nullable=False),
    sa.Column('group_id', sa.UUID(), nullable=False),
    sa.Column('permission_level', sa.Enum('OWNER', 'ADMIN', 'MEMBER', 'VIEWER', name='workspacepermissionlevel'), nullable=False),
    sa.Column('assigned_by', sa.String(length=36), nullable=True),
    sa.Column('assigned_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['assigned_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspaces.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('workspace_id', 'group_id', name='uq_workspace_group')
    )
    op.create_table('workspace_user_mappings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('workspace_id', sa.String(length=36), nullable=False),
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('permission_level', sa.Enum('OWNER', 'ADMIN', 'MEMBER', 'VIEWER', name='workspacepermissionlevel'), nullable=False),
    sa.Column('assigned_by', sa.String(length=36), nullable=True),
    sa.Column('assigned_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['assigned_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspaces.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('workspace_id', 'user_id', name='uq_workspace_user')
    )
    
    # Insert default system groups
    groups_table = sa.table(
        'groups',
        sa.column('id', sa.UUID()),
        sa.column('name', sa.String),
        sa.column('description', sa.Text),
        sa.column('is_active', sa.Boolean),
        sa.column('is_system_group', sa.Boolean),
        sa.column('created_at', sa.DateTime),
        sa.column('updated_at', sa.DateTime),
    )
    
    from datetime import datetime
    import uuid
    
    # Create default system groups
    default_groups = [
        {
            'id': uuid.uuid4(),
            'name': 'Administrators',
            'description': 'System administrators with full access',
            'is_active': True,
            'is_system_group': True,
            'created_at': datetime.utcnow(),
            'updated_at': datetime.utcnow(),
        },
        {
            'id': uuid.uuid4(),
            'name': 'Developers',
            'description': 'Development team with workspace creation and management rights',
            'is_active': True,
            'is_system_group': True,
            'created_at': datetime.utcnow(),
            'updated_at': datetime.utcnow(),
        },
        {
            'id': uuid.uuid4(),
            'name': 'Analysts',
            'description': 'Data analysts with view and execution rights',
            'is_active': True,
            'is_system_group': True,
            'created_at': datetime.utcnow(),
            'updated_at': datetime.utcnow(),
        },
        {
            'id': uuid.uuid4(),
            'name': 'Viewers',
            'description': 'Read-only access to workflows and data',
            'is_active': True,
            'is_system_group': True,
            'created_at': datetime.utcnow(),
            'updated_at': datetime.utcnow(),
        }
    ]
    
    op.bulk_insert(groups_table, default_groups)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('workspace_user_mappings')
    op.drop_table('workspace_group_mappings')
    op.drop_index(op.f('ix_groups_name'), table_name='groups')
    op.drop_table('groups')
    # ### end Alembic commands ###
