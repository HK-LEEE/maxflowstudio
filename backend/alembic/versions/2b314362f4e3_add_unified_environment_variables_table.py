"""add_unified_environment_variables_table

Revision ID: 2b314362f4e3
Revises: a1a1110bfd40
Create Date: 2025-06-27 14:18:54.016153

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '2b314362f4e3'
down_revision: Union[str, Sequence[str], None] = 'a1a1110bfd40'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('environment_variables',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('key', sa.String(length=255), nullable=False),
    sa.Column('value', sa.Text(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('var_type', sa.Enum('STRING', 'SECRET', 'URL', 'NUMBER', 'BOOLEAN', 'JSON', name='environmentvariabletype'), nullable=True),
    sa.Column('category', sa.Enum('DATABASE', 'AUTHENTICATION', 'LLM_API', 'INFRASTRUCTURE', 'APPLICATION', 'CUSTOM', name='environmentvariablecategory'), nullable=True),
    sa.Column('scope', sa.Enum('SYSTEM', 'USER', 'WORKSPACE', name='environmentvariablescope'), nullable=True),
    sa.Column('is_secret', sa.Boolean(), nullable=True),
    sa.Column('is_encrypted', sa.Boolean(), nullable=True),
    sa.Column('is_system_managed', sa.Boolean(), nullable=True),
    sa.Column('user_id', sa.String(36), nullable=True),
    sa.Column('workspace_id', sa.String(36), nullable=True),
    sa.Column('sort_order', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.String(36), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspaces.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_environment_variables_key'), 'environment_variables', ['key'], unique=False)
    
    # Insert system environment variables seed data
    environment_variables_table = sa.table(
        'environment_variables',
        sa.column('id', sa.String(36)),
        sa.column('key', sa.String),
        sa.column('value', sa.Text),
        sa.column('description', sa.Text),
        sa.column('var_type', sa.Enum('STRING', 'SECRET', 'URL', 'NUMBER', 'BOOLEAN', 'JSON', name='environmentvariabletype')),
        sa.column('category', sa.Enum('DATABASE', 'AUTHENTICATION', 'LLM_API', 'INFRASTRUCTURE', 'APPLICATION', 'CUSTOM', name='environmentvariablecategory')),
        sa.column('scope', sa.Enum('SYSTEM', 'USER', 'WORKSPACE', name='environmentvariablescope')),
        sa.column('is_secret', sa.Boolean),
        sa.column('is_encrypted', sa.Boolean),
        sa.column('is_system_managed', sa.Boolean),
        sa.column('sort_order', sa.Integer),
        sa.column('created_at', sa.DateTime),
        sa.column('updated_at', sa.DateTime),
    )
    
    from datetime import datetime
    import uuid
    
    # System configuration variables
    system_variables = [
        # Database settings
        {
            'id': str(uuid.uuid4()), 'key': 'DB_HOST', 'value': 'localhost',
            'description': 'Database host address', 'var_type': 'STRING',
            'category': 'DATABASE', 'scope': 'SYSTEM', 'sort_order': 1
        },
        {
            'id': str(uuid.uuid4()), 'key': 'DB_PORT', 'value': '5432',
            'description': 'Database port number', 'var_type': 'NUMBER',
            'category': 'DATABASE', 'scope': 'SYSTEM', 'sort_order': 2
        },
        {
            'id': str(uuid.uuid4()), 'key': 'DB_NAME', 'value': 'max_flowstudio',
            'description': 'Database name', 'var_type': 'STRING',
            'category': 'DATABASE', 'scope': 'SYSTEM', 'sort_order': 3
        },
        {
            'id': str(uuid.uuid4()), 'key': 'DB_USER', 'value': '',
            'description': 'Database username', 'var_type': 'SECRET',
            'category': 'DATABASE', 'scope': 'SYSTEM', 'sort_order': 4,
            'is_secret': True
        },
        {
            'id': str(uuid.uuid4()), 'key': 'DB_PASSWORD', 'value': '',
            'description': 'Database password', 'var_type': 'SECRET',
            'category': 'DATABASE', 'scope': 'SYSTEM', 'sort_order': 5,
            'is_secret': True
        },
        
        # Authentication settings
        {
            'id': str(uuid.uuid4()), 'key': 'JWT_SECRET_KEY', 'value': '',
            'description': 'JWT token secret key', 'var_type': 'SECRET',
            'category': 'AUTHENTICATION', 'scope': 'SYSTEM', 'sort_order': 1,
            'is_secret': True
        },
        {
            'id': str(uuid.uuid4()), 'key': 'JWT_ALGORITHM', 'value': 'HS256',
            'description': 'JWT signing algorithm', 'var_type': 'STRING',
            'category': 'AUTHENTICATION', 'scope': 'SYSTEM', 'sort_order': 2
        },
        {
            'id': str(uuid.uuid4()), 'key': 'JWT_EXPIRATION_MINUTES', 'value': '30',
            'description': 'JWT token expiration time in minutes', 'var_type': 'NUMBER',
            'category': 'AUTHENTICATION', 'scope': 'SYSTEM', 'sort_order': 3
        },
        
        # LLM API settings
        {
            'id': str(uuid.uuid4()), 'key': 'OPENAI_API_KEY', 'value': '',
            'description': 'OpenAI API key for GPT models', 'var_type': 'SECRET',
            'category': 'LLM_API', 'scope': 'SYSTEM', 'sort_order': 1,
            'is_secret': True
        },
        {
            'id': str(uuid.uuid4()), 'key': 'ANTHROPIC_API_KEY', 'value': '',
            'description': 'Anthropic API key for Claude models', 'var_type': 'SECRET',
            'category': 'LLM_API', 'scope': 'SYSTEM', 'sort_order': 2,
            'is_secret': True
        },
        {
            'id': str(uuid.uuid4()), 'key': 'AZURE_OPENAI_ENDPOINT', 'value': '',
            'description': 'Azure OpenAI endpoint URL', 'var_type': 'URL',
            'category': 'LLM_API', 'scope': 'SYSTEM', 'sort_order': 3
        },
        {
            'id': str(uuid.uuid4()), 'key': 'AZURE_OPENAI_API_KEY', 'value': '',
            'description': 'Azure OpenAI API key', 'var_type': 'SECRET',
            'category': 'LLM_API', 'scope': 'SYSTEM', 'sort_order': 4,
            'is_secret': True
        },
        {
            'id': str(uuid.uuid4()), 'key': 'AZURE_OPENAI_VERSION', 'value': '2024-02-15-preview',
            'description': 'Azure OpenAI API version', 'var_type': 'STRING',
            'category': 'LLM_API', 'scope': 'SYSTEM', 'sort_order': 5
        },
        
        # Infrastructure settings
        {
            'id': str(uuid.uuid4()), 'key': 'REDIS_HOST', 'value': 'localhost',
            'description': 'Redis server host', 'var_type': 'STRING',
            'category': 'INFRASTRUCTURE', 'scope': 'SYSTEM', 'sort_order': 1
        },
        {
            'id': str(uuid.uuid4()), 'key': 'REDIS_PORT', 'value': '6379',
            'description': 'Redis server port', 'var_type': 'NUMBER',
            'category': 'INFRASTRUCTURE', 'scope': 'SYSTEM', 'sort_order': 2
        },
        {
            'id': str(uuid.uuid4()), 'key': 'RABBITMQ_HOST', 'value': 'localhost',
            'description': 'RabbitMQ server host', 'var_type': 'STRING',
            'category': 'INFRASTRUCTURE', 'scope': 'SYSTEM', 'sort_order': 3
        },
        {
            'id': str(uuid.uuid4()), 'key': 'RABBITMQ_PORT', 'value': '5672',
            'description': 'RabbitMQ server port', 'var_type': 'NUMBER',
            'category': 'INFRASTRUCTURE', 'scope': 'SYSTEM', 'sort_order': 4
        },
        
        # Application settings
        {
            'id': str(uuid.uuid4()), 'key': 'APP_NAME', 'value': 'MAX Flowstudio',
            'description': 'Application name', 'var_type': 'STRING',
            'category': 'APPLICATION', 'scope': 'SYSTEM', 'sort_order': 1
        },
        {
            'id': str(uuid.uuid4()), 'key': 'APP_VERSION', 'value': '0.1.0',
            'description': 'Application version', 'var_type': 'STRING',
            'category': 'APPLICATION', 'scope': 'SYSTEM', 'sort_order': 2
        },
        {
            'id': str(uuid.uuid4()), 'key': 'DEBUG', 'value': 'false',
            'description': 'Enable debug mode', 'var_type': 'BOOLEAN',
            'category': 'APPLICATION', 'scope': 'SYSTEM', 'sort_order': 3
        },
    ]
    
    # Set common fields
    now = datetime.utcnow()
    for var in system_variables:
        var.update({
            'is_encrypted': False,
            'is_system_managed': True,
            'created_at': now,
            'updated_at': now,
        })
        if 'is_secret' not in var:
            var['is_secret'] = False
    
    op.bulk_insert(environment_variables_table, system_variables)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_environment_variables_key'), table_name='environment_variables')
    op.drop_table('environment_variables')
    # ### end Alembic commands ###
